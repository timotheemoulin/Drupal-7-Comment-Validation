<?php

function comment_validation_username($form, $form_state)
{
  $name = (isset($form_state['values']['name'])) ? $form_state['values']['name'] : t('Anonymous');
  $comment = $form_state['values']['comment_body']['und'][0]['value'];

  $unauthorized_usernames = variable_get('unauthorized_usernames', '');
  $unauthorized_usernames = str_replace(', ', ',', $unauthorized_usernames);
  $unauthorized_usernames = explode(',', $unauthorized_usernames);
  foreach ($unauthorized_usernames as $term)
  {
    if (strpos($name, $term)!==false)
    {
      form_set_error('name', t('The name you used contains unallowed term : @term',array('@term'=>$term)));
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function comment_validation_form_alter(&$form, $form_state, $form_id)
{
  if ($form_id == 'comment_node_blog_form')
  {
    array_unshift($form['#validate'], 'comment_validation_username');
  }
}


/**
 * Implementation of hook_admin().
 */
function comment_validation_admin()
{
  $form = array();

  $form['unauthorized_usernames'] = array(
    '#type' => 'textfield',
    '#title' => t('Unauthorized usernames for anonymous comments'),
    '#default_value' => variable_get('unauthorized_usernames', 'admin'),
    '#size' => 60,
    '#description' => t("Usernames that contains these terms will be refused on anonymous comments. (comma separated values)"),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}


/**
 * Implementation of hook_menu().
 */
function comment_validation_menu()
{
  $items = array();

  $items['admin/content/comment/validation'] = array(
    'title' => t('Comment validation'),
    'description' => t('Manage here the usernames or words that you do not want to allow in comments.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('comment_validation_admin'),
    'access arguments' => array('administer comment_validation settings'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}